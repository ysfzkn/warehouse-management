version: '3.8'

services:
  # PostgreSQL Database
  db:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: warehouse_db
      POSTGRES_USER: warehouse_user
      POSTGRES_PASSWORD: warehouse_pass
    volumes:
      - postgres_data:/var/lib/postgresql/data
    ports:
      - "5432:5432"
    networks:
      - warehouse-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U warehouse_user -d warehouse_db"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Backend Service
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    ports:
      - "8080:8080"
    environment:
      - SPRING_PROFILES_ACTIVE=docker
      # PostgreSQL Database Configuration
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/warehouse_db
      - SPRING_DATASOURCE_USERNAME=warehouse_user
      - SPRING_DATASOURCE_PASSWORD=warehouse_pass
      - SPRING_JPA_DATABASE_PLATFORM=org.hibernate.dialect.PostgreSQLDialect
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
    depends_on:
      db:
        condition: service_healthy
    networks:
      - warehouse-network
    restart: unless-stopped

  # Frontend Service
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
    ports:
      - "80:80"
    depends_on:
      - backend
    networks:
      - warehouse-network
    restart: unless-stopped

  # pgAdmin - PostgreSQL Management Tool
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: ozkan.development@gmail.com
      PGADMIN_DEFAULT_PASSWORD: admin123
      PGADMIN_CONFIG_SERVER_MODE: 'False'
    volumes:
      - pgadmin_data:/var/lib/pgadmin
    ports:
      - "5050:80"
    depends_on:
      - db
    networks:
      - warehouse-network
    restart: unless-stopped

  # Nginx Reverse Proxy (Optional - for production deployment)
  # nginx:
  #   image: nginx:alpine
  #   ports:
  #     - "443:443"
  #   volumes:
  #     - ./nginx/prod.conf:/etc/nginx/conf.d/default.conf
  #     - ./nginx/ssl:/etc/nginx/ssl
  #   depends_on:
  #     - frontend
  #   networks:
  #     - warehouse-network
  #   restart: unless-stopped

networks:
  warehouse-network:
    driver: bridge

volumes:
  postgres_data:
  pgadmin_data:
